// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  CONTRIBUTOR
  ADMIN
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?  // null for OAuth-only users
  name         String?
  role         Role     @default(MEMBER)
  googleId     String?  @unique
  linkedinId   String?  @unique
  bio          String?
  organization String?
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // LinkedIn API v2 exact field names
  headline     String?
  location     Json?    // {name, country, geographicArea}
  industry     String?
  positions    Json?    // Array of position objects
  educations   Json?    // Array of education objects
  skills       Json?    // Array of skill objects
  numConnections Int?
  profileUrl   String?
  firstName    String?
  lastName     String?
  vanityName   String?
  summary      String?
  specialties  Json?    // Array of strings
  interests    Json?    // Array of strings
  honors       Json?    // Array of strings
  publications Json?    // Array of strings
  patents      Json?    // Array of strings
  certifications Json?  // Array of certification objects
  courses      Json?    // Array of course objects
  volunteer    Json?    // Array of volunteer objects
  languages    Json?    // Array of language objects
  
  resetTokens  ResetToken[]
  applications ContributorApplication[]
  articles     Article[]
  bookmarks    Bookmark[]
  linkedAccounts LinkedAccount[]
}

model LinkedAccount {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider  String   // 'google', 'linkedin', 'email'
  providerId String? // OAuth provider ID (null for email)
  email     String   // Email associated with this account
  name      String?  // Name from this provider
  avatarUrl String?  // Avatar from this provider
  isPrimary Boolean  @default(false) // Primary login method
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([provider, providerId])
  @@unique([provider, email])
}

model ResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ContributorApplication {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  bio        String
  motivation String
  status     String   @default("pending") // pending|approved|rejected
  createdAt  DateTime @default(now())
}

model Article {
  id          String   @id @default(cuid())
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  title       String
  slug        String   @unique
  summary     String
  body        String
  journal     String   // Investment Management|Bankruptcy|Legal
  category    String   // HealthTech, FinTech, etc
  status      String   @default("draft") // draft|pending|published|rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  bookmarks   Bookmark[]
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
  
  @@unique([userId, articleId])
}
